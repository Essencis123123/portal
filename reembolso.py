import streamlit as st
import pandas as pd
import datetime
import requests
from PIL import Image
from io import BytesIO
import os
from pandas.errors import EmptyDataError
import plotly.express as px
import re


# --- Configura√ß√£o do Layout e Tema ---
st.set_page_config(page_title="Gest√£o de Reembolsos", layout="wide", page_icon="üí∞")

# --- CSS Personalizado para o Tema Essencis ---
st.markdown(
    """
    <style>
    /* Cor do menu lateral e texto */
    [data-testid="stSidebar"] {
        background-color: #1C4D86;
        color: white;
    }
    
    /* Regras para garantir que TODO o texto no sidebar seja branco */
    [data-testid="stSidebar"] *,
    [data-testid="stSidebar"] p,
    [data-testid="stSidebar"] h1,
    [data-testid="stSidebar"] h2,
    [data-testid="stSidebar"] h3,
    [data-testid="stSidebar"] label,
    [data-testid="stSidebar"] .st-emotion-cache-1ky8k0j p,
    [data-testid="stSidebar"] .st-emotion-cache-1ky8k0j,
    .stDownloadButton button p {
        color: white !important;
    }

    /* Estilo para o radio button, garantindo que o texto dele tamb√©m seja branco */
    [data-testid="stSidebar"] .stRadio div[role="radiogroup"] label span {
        color: white !important;
    }
    
    /* Estilo para deixar a letra dos bot√µes preta */
    .stButton button p {
        color: black !important;
    }
    .stDownloadButton button p {
        color: white !important;
    }

    [data-testid="stSidebar"] img {
        display: block;
        margin-left: auto;
        margin-right: auto;
        width: 80%;
        border-radius: 10px;
        padding: 10px 0;
    }

    /* Estilo para o container principal da p√°gina */
    .main-container {
        background-color: white;
        padding: 40px;
        border-radius: 16px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        color: #333;
    }
    
    /* Estilo para o cabe√ßalho principal da p√°gina */
    .header-container {
        background: linear-gradient(135deg, #0055a5 0%, #1C4D86 100%);
        padding: 25px;
        border-radius: 15px;
        margin-bottom: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        text-align: center;
        color: white;
    }
    
    .header-container h1 {
        color: white;
        margin: 0;
    }

    .header-container p {
        color: white;
        margin: 5px 0 0 0;
        font-size: 18px;
    }
    
    /* Estilo para os sub-cabe√ßalhos dentro da √°rea principal */
    h2, h3 {
        color: #1C4D86;
        font-weight: 600;
    }
    
    /* Estilo para os bot√µes de a√ß√£o */
    .stButton button {
        background-color: #0055a5;
        color: white;
        border-radius: 8px;
        transition: background-color 0.3s;
    }
    .stButton button:hover {
        background-color: #007ea7;
    }
    
    /* Estilo para os cards de m√©tricas */
    [data-testid="stMetric"] > div {
        background-color: #f0f2f5;
        color: #1C4D86;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    </style>
    """,
    unsafe_allow_html=True
)

# --- Fun√ß√µes para carregar recursos ---
@st.cache_data
def load_logo(url):
    try:
        response = requests.get(url)
        img = Image.open(BytesIO(response.content))
        return img
    except Exception as e:
        st.error(f"Erro ao carregar a logo: {e}")
        return None

# --- Configura√ß√£o de Dados e L√≥gica de Backend (Local) ---
ARQUIVO_USUARIOS = "usuarios.xlsx"
ARQUIVO_REEMBOLSOS = "reembolsos.xlsx"

def criar_planilha_se_nao_existir(caminho, colunas):
    if not os.path.exists(caminho):
        df = pd.DataFrame(columns=colunas)
        df.to_excel(caminho, index=False)

def carregar_dados_reembolsos():
    criar_planilha_se_nao_existir(
        ARQUIVO_REEMBOLSOS,
        ['DATA', 'NOME', 'DEPARTAMENTO', 'TIPO_DESPESA', 'VALOR', 'JUSTIFICATIVA', 'STATUS', 'ID_COMPROVANTE']
    )
    try:
        df = pd.read_excel(ARQUIVO_REEMBOLSOS)
        return df
    except (FileNotFoundError, EmptyDataError):
        return pd.DataFrame(columns=['DATA', 'NOME', 'DEPARTAMENTO', 'TIPO_DESPESA', 'VALOR', 'JUSTIFICATIVA', 'STATUS', 'ID_COMPROVANTE'])

def salvar_dados_reembolsos(df):
    try:
        df.to_excel(ARQUIVO_REEMBOLSOS, index=False)
        return True
    except Exception as e:
        st.error(f"Erro ao salvar dados localmente: {e}")
        return False

# --- L√≥gica de Login e Cadastro (Local) ---
def cadastrar_usuario(nome, matricula, email, senha):
    criar_planilha_se_nao_existir(
        ARQUIVO_USUARIOS,
        ['Nome', 'Matricula', 'Email', 'Senha']
    )
    df_usuarios = pd.read_excel(ARQUIVO_USUARIOS)
    
    # Limpa os espa√ßos dos valores de entrada
    email_limpo = email.strip()
    matricula_limpa = matricula.strip()

    if email_limpo in df_usuarios['Email'].astype(str).str.strip().values:
        st.error("‚ùå Email j√° cadastrado. Por favor, use outro.")
        return False
    if matricula_limpa in df_usuarios['Matricula'].astype(str).str.strip().values:
        st.error("‚ùå Matr√≠cula j√° cadastrada.")
        return False

    novo_usuario = pd.DataFrame([{
        'Nome': nome.strip(),
        'Matricula': matricula_limpa,
        'Email': email_limpo,
        'Senha': senha
    }])
    df_usuarios = pd.concat([df_usuarios, novo_usuario], ignore_index=True)
    df_usuarios.to_excel(ARQUIVO_USUARIOS, index=False)
    
    st.success("üéâ Cadastro realizado com sucesso! Voc√™ j√° pode fazer login.")
    return True

def fazer_login(email, senha):
    criar_planilha_se_nao_existir(
        ARQUIVO_USUARIOS,
        ['Nome', 'Matricula', 'Email', 'Senha']
    )
    try:
        df_usuarios = pd.read_excel(ARQUIVO_USUARIOS)
        
        # Limpa os espa√ßos dos valores da planilha para compara√ß√£o
        df_usuarios['Email'] = df_usuarios['Email'].astype(str).str.strip()
        df_usuarios['Senha'] = df_usuarios['Senha'].astype(str).str.strip()
        
        usuario_encontrado = df_usuarios[
            (df_usuarios['Email'] == email.strip()) & (df_usuarios['Senha'] == senha.strip())
        ]
        
        if not usuario_encontrado.empty:
            st.session_state['logado'] = True
            st.session_state['nome_colaborador'] = usuario_encontrado.iloc[0]['Nome']
            st.success(f"‚úÖ Login bem-sucedido! Bem-vindo(a), {st.session_state['nome_colaborador']}.")
            st.rerun()
            return True
        else:
            st.error("‚ùå Email ou senha incorretos.")
            return False
    except (FileNotFoundError, EmptyDataError):
        st.error("Planilha de usu√°rios n√£o encontrada ou vazia.")
        return False

# Lista de Departamentos
DEPARTAMENTOS = [
    "1601 - Financeiro / Administrativo",
    "1201 - Administra√ß√£o da Manuten√ß√£o",
    "2302 - Aterro K1",
    "2303 - Aterro K2",
    "1202 - Manuten√ß√£o de ve√≠culos e equipamentos",
    "1203 - Manuten√ß√£o Eletromec√¢nica",
    "1301 - Balan√ßa",
    "1302 - Laborat√≥rio",
    "1303 - Manuten√ß√£o de aterros",
    "1304 - Servi√ßos Gerais",
    "1308 - Tecnologia da Informa√ß√£o",
    "1401 - Comercial",
    "1502 - Comunica√ß√£o",
    "1505 - Seguran√ßa do Trabalho",
    "2401 - Coprocessamento",
    "2305 - Tratamento de efluentes privados",
]

# Lista de Tipos de Despesa
TIPOS_DESPESA = [
    "Corridas de Uber, 99 ou t√°xi",
    "Estacionamento e ped√°gios",
    "Alimenta√ß√£o",
    "Material de escrit√≥rio (canetas, papel, clips, etc.)",
    "Boletos de inscri√ß√£o (cursos, eventos, concursos)",
    "Taxas p√∫blicas (DAE, GRU, cart√≥rio, etc.)",
    "Ingressos corporativos ou institucionais",
    "Manuten√ß√£o de M√°quinas e Equipamentos",
    "Materiais de baixo custo (torneiras, l√¢mpadas, tomadas)",
    "Outros"
]

# --- INTERFACE PRINCIPAL ---
if 'logado' not in st.session_state or not st.session_state['logado']:
    st.title("üí∞ Login do Sistema de Reembolso")
    st.markdown("---")
    
    login_tab, cadastro_tab = st.tabs(["Fazer Login", "Cadastrar Novo Usu√°rio"])
    
    with login_tab:
        st.subheader("Acesse sua conta")
        with st.form("login_form"):
            email_login = st.text_input("Email", key="email_login")
            senha_login = st.text_input("Senha", type="password", key="senha_login")
            if st.form_submit_button("Entrar"):
                fazer_login(email_login, senha_login)
    
    with cadastro_tab:
        st.subheader("Crie sua conta")
        with st.form("cadastro_form"):
            nome_cadastro = st.text_input("Nome completo")
            matricula_cadastro = st.text_input("Matr√≠cula")
            email_cadastro = st.text_input("Email")
            senha_cadastro = st.text_input("Senha", type="password")
            repita_senha_cadastro = st.text_input("Repita a senha", type="password")
            if st.form_submit_button("Cadastrar"):
                if not all([nome_cadastro, matricula_cadastro, email_cadastro, senha_cadastro, repita_senha_cadastro]):
                    st.error("Por favor, preencha todos os campos.")
                elif senha_cadastro != repita_senha_cadastro:
                    st.error("As senhas n√£o coincidem.")
                else:
                    cadastrar_usuario(nome_cadastro, matricula_cadastro, email_cadastro, senha_cadastro)

else:
    # Exibi√ß√£o da logo no sidebar
    logo_url = "http://nfeviasolo.com.br/portal2/imagens/Logo%20Essencis%20MG%20-%20branca.png"
    logo_img = load_logo(logo_url)
    if logo_img:
        st.sidebar.image(logo_img, use_container_width=True)

    # Inicializa a lista de reembolsos no session state se ainda n√£o existir
    if 'reembolsos_a_enviar' not in st.session_state:
        st.session_state.reembolsos_a_enviar = [{}]

    # Carregamento dos dados
    if 'df_reembolsos' not in st.session_state:
        st.session_state.df_reembolsos = carregar_dados_reembolsos()

    st.sidebar.write(f"**Bem-vindo, {st.session_state.get('nome_colaborador', 'Gestor')}!**")
    st.sidebar.title("Menu de Navega√ß√£o")
    menu_option = st.sidebar.radio(
        "Selecione a op√ß√£o:",
        ["üìù Solicitar Reembolso", "üìä Dashboard", "üîç Consultar", "‚öôÔ∏è Configura√ß√µes"],
        index=0
    )
    st.sidebar.divider()
    if st.sidebar.button("Logout"):
        st.session_state['logado'] = False
        st.session_state.pop('nome_colaborador', None)
        st.rerun()

    df_reembolsos = st.session_state.df_reembolsos
    
    # --- P√ÅGINA: SOLICITAR REEMBOLSO ---
    if menu_option == "üìù Solicitar Reembolso":
        st.markdown("""
            <div class='header-container'>
                <h1>üìù SOLICITAR REEMBOLSO</h1>
                <p>Preencha o formul√°rio para enviar sua solicita√ß√£o de reembolso.</p>
            </div>
        """, unsafe_allow_html=True)

        # Filtra os dados para o usu√°rio logado
        df_reembolsos_usuario = df_reembolsos[df_reembolsos['NOME'] == st.session_state.nome_colaborador].copy()
        
        if not df_reembolsos_usuario.empty:
            df_reembolsos_usuario['VALOR'] = pd.to_numeric(df_reembolsos_usuario['VALOR'], errors='coerce').fillna(0)
            
            # --- M√âTRICAS DO USU√ÅRIO NA P√ÅGINA DE SOLICITA√á√ÉO ---
            total_pedidos = len(df_reembolsos_usuario)
            pedidos_pendentes = len(df_reembolsos_usuario[df_reembolsos_usuario['STATUS'] == 'PENDENTE'])
            pedidos_atendidos = total_pedidos - pedidos_pendentes
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total de Pedidos", total_pedidos)
            with col2:
                st.metric("Pedidos Pendentes", pedidos_pendentes)
            with col3:
                st.metric("Pedidos Atendidos", pedidos_atendidos)
            
            st.markdown("---")

        with st.expander("‚ûï Adicionar Nova Solicita√ß√£o", expanded=True):
            st.subheader("Dados do Colaborador")
            nome_colaborador = st.text_input("Seu Nome Completo*", value=st.session_state.get('nome_colaborador', ''), disabled=True, key="nome_form")
            departamento = st.selectbox("Seu Departamento*", options=DEPARTAMENTOS, key="depto_form")
            
            st.subheader("Detalhes dos Reembolsos")
            
            # Bot√£o para adicionar mais reembolsos
            if st.button("‚ûï Adicionar Outro Reembolso"):
                st.session_state.reembolsos_a_enviar.append({})
                st.rerun()
            
            reembolsos_validos = True
            
            for i in range(len(st.session_state.reembolsos_a_enviar)):
                st.markdown(f"---")
                st.markdown(f"**Reembolso #{i + 1}**")

                tipo_despesa = st.selectbox(f"Tipo de Despesa* #{i + 1}", options=TIPOS_DESPESA, key=f"tipo_despesa_{i}")
                col_data, col_valor = st.columns(2)
                with col_data:
                    data_despesa = st.date_input(f"Data da Despesa* #{i + 1}", datetime.date.today(), key=f"data_despesa_{i}")
                with col_valor:
                    valor_reembolso = st.number_input(
                        f"Valor da Despesa (R$)* #{i + 1}", 
                        min_value=0.01, 
                        format="%.2f",
                        step=0.01,
                        key=f"valor_reembolso_{i}"
                    )
                justificativa = st.text_area(f"Justificativa* #{i + 1}", placeholder="Explique o motivo da despesa.", key=f"justificativa_{i}")
                comprovantes = st.file_uploader(
                    f"Anexe os Comprovantes (Recibos, Notas Fiscais)* #{i + 1}",
                    type=['pdf', 'jpg', 'jpeg', 'png'],
                    accept_multiple_files=True,
                    key=f"comprovantes_{i}"
                )

                st.session_state.reembolsos_a_enviar[i] = {
                    "tipo_despesa": tipo_despesa,
                    "data_despesa": data_despesa,
                    "valor_reembolso": valor_reembolso,
                    "justificativa": justificativa,
                    "comprovantes": comprovantes
                }
            
            if st.button("‚úÖ Enviar Todas as Solicita√ß√µes", key="enviar_todos"):
                reembolsos_validos = True
                
                for i, reembolso in enumerate(st.session_state.reembolsos_a_enviar):
                    if not all([st.session_state.nome_form, st.session_state.depto_form, reembolso['tipo_despesa'], reembolso['valor_reembolso'], reembolso['justificativa'], reembolso['comprovantes']]):
                        st.error(f"‚ö†Ô∏è Por favor, preencha todos os campos obrigat√≥rios para o Reembolso #{i+1} e anexe os comprovantes.")
                        reembolsos_validos = False
                        break
                    elif reembolso['valor_reembolso'] <= 0:
                        st.error(f"‚ö†Ô∏è O valor do Reembolso #{i+1} deve ser maior que zero.")
                        reembolsos_validos = False
                        break
                
                if reembolsos_validos:
                    novos_registros = []
                    for reembolso in st.session_state.reembolsos_a_enviar:
                        # Esta √© a parte que voc√™ precisa adaptar para salvar links
                        nomes_comprovantes = ", ".join([c.name for c in reembolso['comprovantes']])
                        
                        novo_registro = {
                            "DATA": reembolso['data_despesa'].strftime("%d/%m/%Y"),
                            "NOME": st.session_state.nome_form,
                            "DEPARTAMENTO": st.session_state.depto_form,
                            "TIPO_DESPESA": reembolso['tipo_despesa'],
                            "VALOR": reembolso['valor_reembolso'],
                            "JUSTIFICATIVA": reembolso['justificativa'],
                            "STATUS": "PENDENTE",
                            "ID_COMPROVANTE": nomes_comprovantes  # Alterar para salvar os links de download aqui
                        }
                        novos_registros.append(novo_registro)
                    
                    df_novos_registros = pd.DataFrame(novos_registros)
                    st.session_state.df_reembolsos = pd.concat([st.session_state.df_reembolsos, df_novos_registros], ignore_index=True)

                    if salvar_dados_reembolsos(st.session_state.df_reembolsos):
                        st.success("üéâ Todas as solicita√ß√µes de reembolso foram registradas com sucesso!")
                        st.session_state.reembolsos_a_enviar = [{}] # Limpa o formul√°rio ap√≥s o sucesso
                        st.rerun()
                    else:
                        st.error("‚ùå Erro ao salvar os dados. Tente novamente.")
        
        st.markdown("---")
        
        # --- EXIBE O HIST√ìRICO DO USU√ÅRIO NA PR√ìPRIA P√ÅGINA ---
        st.subheader("Suas Solicita√ß√µes Enviadas Recentemente")
        if not df_reembolsos_usuario.empty:
            df_usuario = df_reembolsos_usuario.copy()
            df_usuario['VALOR'] = df_usuario['VALOR'].apply(lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
            st.dataframe(df_usuario, use_container_width=True)
        else:
            st.info("Voc√™ ainda n√£o enviou nenhuma solicita√ß√£o de reembolso.")


    # --- P√ÅGINA: DASHBOARD ---
    elif menu_option == "üìä Dashboard":
        st.markdown("""
            <div class='header-container'>
                <h1>üìä DASHBOARD DE REEMBOLSOS</h1>
                <p>An√°lise do fluxo de solicita√ß√µes e custos.</p>
            </div>
        """, unsafe_allow_html=True)
        
        if not df_reembolsos.empty:
            
            # Filtra os dados para o usu√°rio logado
            df_reembolsos_usuario = df_reembolsos[df_reembolsos['NOME'] == st.session_state.nome_colaborador].copy()
            
            if df_reembolsos_usuario.empty:
                st.info("Voc√™ ainda n√£o tem dados para o dashboard. Envie sua primeira solicita√ß√£o de reembolso!")
            else:
                df_reembolsos_usuario['VALOR'] = pd.to_numeric(df_reembolsos_usuario['VALOR'], errors='coerce').fillna(0)
            
                # --- M√âTRICAS DO USU√ÅRIO ---
                st.subheader(f"Resumo das suas solicita√ß√µes, {st.session_state.nome_colaborador}")
                total_pedidos = len(df_reembolsos_usuario)
                pedidos_pendentes = len(df_reembolsos_usuario[df_reembolsos_usuario['STATUS'] == 'PENDENTE'])
                pedidos_atendidos = total_pedidos - pedidos_pendentes
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Total de Pedidos", total_pedidos)
                with col2:
                    st.metric("Pedidos Pendentes", pedidos_pendentes)
                with col3:
                    st.metric("Pedidos Atendidos", pedidos_atendidos)
                
                st.markdown("---")
                
                valor_total_solicitado = df_reembolsos_usuario['VALOR'].sum()
                
                col_metrica1, col_metrica2 = st.columns(2)
                with col_metrica1:
                    st.metric("Valor Total Solicitado", f"R$ {valor_total_solicitado:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
                with col_metrica2:
                    if total_pedidos > 0:
                         st.metric("M√©dia por Reembolso", f"R$ {df_reembolsos_usuario['VALOR'].mean():,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
                    else:
                         st.metric("M√©dia por Reembolso", "R$ 0,00")
                
                st.subheader("Distribui√ß√£o das suas Despesas por Tipo")
                dep_val = df_reembolsos_usuario.groupby('TIPO_DESPESA')['VALOR'].sum().reset_index()
                fig = px.bar(dep_val, x='TIPO_DESPESA', y='VALOR', title="Valor de Reembolso por Tipo de Despesa")
                st.plotly_chart(fig, use_container_width=True)

                st.subheader("Status das suas Solicita√ß√µes")
                status_count = df_reembolsos_usuario['STATUS'].value_counts().reset_index()
                status_count.columns = ['Status', 'Quantidade']
                fig_pizza = px.pie(status_count, values='Quantidade', names='Status', title='Status das suas Solicita√ß√µes')
                st.plotly_chart(fig_pizza, use_container_width=True)
        else:
            st.info("Nenhum dado de reembolso dispon√≠vel para an√°lise. Envie sua primeira solicita√ß√£o!")

    # --- P√ÅGINA: CONSULTAR REEMBOLSOS ---
    elif menu_option == "üîç Consultar":
        st.markdown("""
            <div class='header-container'>
                <h1>üîç CONSULTAR SOLICITA√á√ïES</h1>
                <p>Acompanhe e filtre as solicita√ß√µes de reembolso.</p>
            </div>
        """, unsafe_allow_html=True)
        
        if not df_reembolsos.empty:
            df_consulta = df_reembolsos.copy()
            df_consulta['VALOR'] = pd.to_numeric(df_consulta['VALOR'], errors='coerce').fillna(0)

            col1, col2 = st.columns(2)
            with col1:
                nome_consulta = st.text_input("Buscar por Nome", placeholder="Digite o nome do colaborador...")
            with col2:
                status_options = ["TODOS"] + sorted(df_reembolsos['STATUS'].dropna().unique().tolist())
                status_consulta = st.selectbox("Filtrar por Status", options=status_options)

            # Aplica os filtros
            if nome_consulta:
                df_consulta = df_consulta[df_consulta['NOME'].str.contains(nome_consulta, case=False, na=False)]
            if status_consulta != "TODOS":
                df_consulta = df_consulta[df_consulta['STATUS'] == status_consulta]
            
            # Formata a coluna de data para o padr√£o brasileiro
            if 'DATA' in df_consulta.columns:
                df_consulta['DATA'] = pd.to_datetime(df_consulta['DATA'], format='%d/%m/%Y', errors='coerce').dt.strftime('%d/%m/%Y')
            
            # Exibe a tabela com a coluna de links clic√°veis
            st.dataframe(
                df_consulta, 
                use_container_width=True,
                column_config={
                    "ID_COMPROVANTE": st.column_config.LinkColumn(
                        "Comprovante",
                        help="Clique para baixar o comprovante",
                        display_text="üì• Download"
                    )
                }
            )

            csv_download = df_consulta.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• Download dos Resultados",
                data=csv_download,
                file_name='reembolsos_filtrados.csv',
                mime='text/csv'
            )

    # --- P√ÅGINA: CONFIGURA√á√ïES ---
    elif menu_option == "‚öôÔ∏è Configura√ß√µes":
        st.markdown("""
            <div class='header-container'>
                <h1>‚öôÔ∏è CONFIGURA√á√ïES DO SISTEMA</h1>
                <p>Gerenciamento e manuten√ß√£o dos dados.</p>
            </div>
        """, unsafe_allow_html=True)

        st.subheader("Manuten√ß√£o de Dados")
        if st.button("üîÑ Recarregar Dados"):
            st.session_state.df_reembolsos = carregar_dados_reembolsos()
            st.success("Dados recarregados com sucesso!")
            st.rerun()

        st.subheader("Download de Backup")
        csv_backup = df_reembolsos.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üíæ Fazer Backup de Reembolsos",
            data=csv_backup,
            file_name=f"backup_reembolsos_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )
